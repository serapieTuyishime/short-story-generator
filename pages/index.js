import Head from "next/head";
import { Inter } from "next/font/google";
import { useState } from "react";
import TextInput from "@/components/TextInput";
import SubmitButton from "@/components/SubmitButton";
import ResponseDisplay from "@/components/ResponseDisplay";
import useApi from "@/hooks/useApi";
import { getUserPrompt } from "../prompts/promptUtils";
import { useForm } from "react-hook-form";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
    const {
        register,
        handleSubmit,
        watch,
        formState: { errors },
    } = useForm();
    const [submitValue, setSubmitValue] = useState("");
    const { data, error, loading } = useApi("/api/openai", "POST", submitValue);

    const onSubmit = async (form) => {
        const { genre, age } = form;
        const signupData = {
            genre,
            age,
        };

        console.log("This is the form data", signupData, errors);
    };

    return (
        <>
            <Head>
                <title>NextJS OpenAI Boilerplate</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="container">
                <h1 className={inter.className}>NextJS OpenAI Boilerplate</h1>
                <p className={inter.className}>
                    {" "}
                    Test this boilerplate: Enter an animal and it will generate
                    a pet name for you.
                </p>
                <form onSubmit={handleSubmit(onSubmit)}>
                    <div
                        style={{
                            width: "700px",
                            display: "flex",
                            flexWrap: "wrap",
                            alignItems: "center",
                            columnGap: "12px",
                        }}
                    >
                        <TextInput
                            placeholder={"Enter maximum targetted age"}
                            inputName="age"
                            register={register}
                            error={errors.age ? errors.age.message : ""}
                        />
                        <TextInput
                            placeholder={"Select genre"}
                            inputName="genre"
                            register={register}
                            error={errors.genre ? errors.genre.message : ""}
                        />
                        <TextInput
                            placeholder={"Type"}
                            inputName="type"
                            register={register}
                            error={errors.type ? errors.type.message : ""}
                        />
                    </div>
                    <ResponseDisplay
                        data={data}
                        error={error}
                        loading={loading}
                    />

                    <SubmitButton onClick={handleSubmit} disabled={loading} />
                </form>
            </main>
        </>
    );
}
